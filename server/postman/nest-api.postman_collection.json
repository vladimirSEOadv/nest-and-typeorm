{
  "info": {
    "_postman_id": "e7efc5d5-6f2d-48fd-bb7e-a4629c3b12fb",
    "name": "nest-api",
    "description": "# üöÄ Get started here\n\nThis collection guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this collection**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these request types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT and PATCH requests.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a variable called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more scripts in \"Tests\" to verify if the API works as expected and execute flows.\n    \n\n## ‚ÑπÔ∏è Resources\n\n[Building requests](https://learning.postman.com/docs/sending-requests/requests/)  \n[Authorizing requests](https://learning.postman.com/docs/sending-requests/authorization/)  \n[Using variables](https://learning.postman.com/docs/sending-requests/variables/)  \n[Managing environments](https://learning.postman.com/docs/sending-requests/managing-environments/)  \n[Writing scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21221130"
  },
  "item": [
    {
      "name": "Unautorised",
      "item": [
        {
          "name": "/user - Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"email\": \"test{{$randomInt}}@gmail.com\",\r\n\t\"password\": \"111111\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/user",
              "host": [
                "{{url}}"
              ],
              "path": [
                "user"
              ]
            },
            "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
          },
          "response": []
        },
        {
          "name": "/auth/login - Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{url}}/auth/login",
              "host": [
                "{{url}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Autorised",
      "item": [
        {
          "name": "User",
          "item": [
            {
              "name": "/auth/profile - Get profile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/auth/profile",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "auth",
                    "profile"
                  ]
                },
                "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
              },
              "response": []
            }
          ]
        },
        {
          "name": "/Categories",
          "item": [
            {
              "name": "/categories/ - Categories - FindAll",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const firstCategoryInResponse = pm.response.json()[0].id;\r",
                      "pm.environment.set(\"existCategoryForThisUser\", firstCategoryInResponse);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/categories/",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "categories",
                    ""
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/categories/ - Categories - Create",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const firstCategoryInResponse = pm.response.json().id;\r",
                      "pm.environment.set(\"existCategoryForThisUser\", firstCategoryInResponse);\r",
                      "\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"title\": \"My category - {{$randomWord}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/categories/",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "categories",
                    ""
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/categories/1 - Categories - FindOne",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/categories/{{existCategoryForThisUser}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "categories",
                    "{{existCategoryForThisUser}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/categories/1 - Categories - Update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"title\": \"Category - {{$randomWord}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/categories/{{existCategoryForThisUser}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "categories",
                    "{{existCategoryForThisUser}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/categories/1 - Categories - Delete",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "console.log(`Category ${pm.environment.get('existCategoryForThisUser')} deleted`)\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const updateExistCategoryForThisUser = () => {\r",
                      "    pm.sendRequest({\r",
                      "    url: `${pm.environment.get(\"url\")}/categories/`,\r",
                      "    method: 'GET',\r",
                      "    header: {\r",
                      "        'Content-Type': 'application/json',\r",
                      "        'Authorization': `Bearer ${pm.environment.get('token')}`\r",
                      "    },\r",
                      "},  (err, response) => {\r",
                      "    if (response.code === 200) {\r",
                      "        console.log(\"response\", response)\r",
                      "        const categoryList = response.json();\r",
                      "        const existCategory = categoryList[0].id\r",
                      "        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è\r",
                      "        pm.environment.set(\"existCategoryForThisUser\", existCategory);\r",
                      "        console.log(`existCategoryForThisUser –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞ –Ω–∞: ${existCategory}`);\r",
                      "\r",
                      "    } else {\r",
                      "        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ existCategoryForThisUser. –ö–æ–¥: ${response.code}`);\r",
                      "    }\r",
                      "});\r",
                      "}\r",
                      "updateExistCategoryForThisUser()\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{url}}/categories/{{existCategoryForThisUser}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "categories",
                    "{{existCategoryForThisUser}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "/Transactions",
          "item": [
            {
              "name": "/transaction/ - Transaction - FindAll",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const firstTransactionInResponse = pm.response.json()[0].id;\r",
                      "pm.environment.set(\"existTransactionForThisUser\", firstTransactionInResponse);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/transactions/",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transactions",
                    ""
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/transaction/ - Transaction - Create",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const firstTransactionInResponse = pm.response.json().id;\r",
                      "pm.environment.set(\"existTransactionForThisUser\", firstTransactionInResponse);\r",
                      "console.log(`existTransactionForThisUser –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞ –Ω–∞: ${firstTransactionInResponse}`);\r",
                      "\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"title\": \"asdzx\",\r\n    \"amount\": 11111,\r\n    \"type\": \"income\",\r\n    \"category\": {{existCategoryForThisUser}}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/transactions/",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transactions",
                    ""
                  ]
                }
              },
              "response": [
                {
                  "name": "/transaction/ - Transaction - Create: income",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"title\": \"asdzx\",\r\n    \"amount\": 11111,\r\n    \"type\": \"income\",\r\n    \"category\": {{existCategoryForThisUser}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/transactions/",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "transactions",
                        ""
                      ]
                    }
                  },
                  "_postman_previewlanguage": null,
                  "header": null,
                  "cookie": [],
                  "body": null
                },
                {
                  "name": "/transaction/ - Transaction - Create: expense",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"title\": \"asdzx\",\r\n    \"amount\": 11111,\r\n    \"type\": \"expense\",\r\n    \"category\": {{existCategoryForThisUser}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/transactions/",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "transactions",
                        ""
                      ]
                    }
                  },
                  "_postman_previewlanguage": null,
                  "header": null,
                  "cookie": [],
                  "body": null
                }
              ]
            },
            {
              "name": "/transaction/pagination?page=1&limit=1 - Transaction - Pagination",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/transactions?page=1&limit=3",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "3"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/transaction/1 - Transaction - FindOne",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/transactions/{{existTransactionForThisUser}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transactions",
                    "{{existTransactionForThisUser}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/transaction/1 - Transaction - findAllByType",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is a number\", function () {\r",
                      "    const res = pm.response.text()\r",
                      "    const resToNumber = parseInt(res)\r",
                      "    pm.expect(!isNaN(resToNumber)).to.be.true;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/transactions/expense/find",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transactions",
                    "expense",
                    "find"
                  ]
                }
              },
              "response": [
                {
                  "name": "/transaction/1 - Transaction - findAllByType: expense",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{url}}/transactions/expense/find",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "transactions",
                        "expense",
                        "find"
                      ]
                    }
                  },
                  "_postman_previewlanguage": null,
                  "header": null,
                  "cookie": [],
                  "body": null
                },
                {
                  "name": "/transaction/1 - Transaction - findAllByType: income",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{url}}/transactions/income/find",
                      "host": [
                        "{{url}}"
                      ],
                      "path": [
                        "transactions",
                        "income",
                        "find"
                      ]
                    }
                  },
                  "_postman_previewlanguage": null,
                  "header": null,
                  "cookie": [],
                  "body": null
                }
              ]
            },
            {
              "name": "/transaction/1 - Transaction - Update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"title\": \"text text\",\r\n    \"amount\": 1999,\r\n    \"type\": \"expense\",\r\n    \"category\": {{existCategoryForThisUser}}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/transactions/{{existTransactionForThisUser}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transactions",
                    "{{existTransactionForThisUser}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "/transaction/1 - Transaction - Delete",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const updateExistTransactionForThisUser = () => {\r",
                      "    pm.sendRequest({\r",
                      "    url: `${pm.environment.get(\"url\")}/transactions/`,\r",
                      "    method: 'GET',\r",
                      "    header: {\r",
                      "        'Content-Type': 'application/json',\r",
                      "        'Authorization': `Bearer ${pm.environment.get('token')}`\r",
                      "    },\r",
                      "},  (err, response) => {\r",
                      "    if (response.code === 200) {\r",
                      "        const transactionList = response.json();\r",
                      "        const existTransaction = transactionList[0].id\r",
                      "        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\r",
                      "        pm.environment.set(\"existTransactionForThisUser\", existTransaction);\r",
                      "        console.log(`existTransactionForThisUser –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞ –Ω–∞: ${existTransaction}`);\r",
                      "    } else {\r",
                      "        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ existTransactionForThisUser. –ö–æ–¥: ${response.code}`);\r",
                      "    }\r",
                      "});\r",
                      "}\r",
                      "updateExistTransactionForThisUser()"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{url}}/transactions/{{existTransactionForThisUser}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "transactions",
                    "{{existTransactionForThisUser}}"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ],
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{token}}",
            "type": "string"
          }
        ]
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const requestBody = {",
              "    email: pm.environment.get(\"email\").toString(),",
              "    password: pm.environment.get(\"password\").toString()",
              "};",
              "const authUrl = `${pm.environment.get(\"url\")}/auth/login`",
              "const successResponseCode = 201",
              "",
              "pm.sendRequest({",
              "    url: authUrl,",
              "    method: 'POST',",
              "    header: {",
              "        'Content-Type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify(requestBody)",
              "    }",
              "}, function (err, response) {",
              "    if (response.code === successResponseCode) {",
              "        const responseBody = response.json();",
              "",
              "        const {token, id: userId} = responseBody; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏—Å–∫–æ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞",
              "",
              "        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
              "        pm.environment.set(\"token\", token);",
              "        pm.environment.set(\"userId\", userId);",
              "        pm.environment.set(\"lastTokenUpdate\", new Date().toString());",
              "",
              "        // Log",
              "        // console.log(`Current token ${token}`);",
              "        // console.log(`Current userId ${userId}`);",
              "    } else {",
              "        console.error(`",
              "        –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. ",
              "        Response code: ${response.code}. ",
              "        Error: ${err}",
              "        `);",
              "    }",
              "});"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "id",
      "value": "1"
    },
    {
      "key": "base_url",
      "value": "https://postman-rest-api-learner.glitch.me/"
    },
    {
      "key": "existCategoryForThisUser",
      "value": ""
    },
    {
      "key": "test",
      "value": ""
    }
  ]
}